&ACCESS RVO
&REL 6
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
&PARAM EDITMASK = *
DEF erxdemo_1( )
; =============================================
; 
; EXAMPLE OF: ST_ETHERNET
; Type: RSI Object
;
; =============================================
;FOLD Overview notes
; =============================================
;  NAME
;    KUKA.Ethernet.RSIXML
;  COPYRIGHT
;    KUKA Robter GmbH
;
; =============================================
;ENDFOLD

;FOLD INI
  ;FOLD BASISTECH INI
    GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
    INTERRUPT ON 3 
    BAS (#INITMOV,0 )
  ;ENDFOLD (BASISTECH INI)
  ;FOLD USER INI
    ;Make your modifications here

  ;ENDFOLD (USER INI)
;ENDFOLD (INI)

HALT
; The current position will be used as SAK movement!
PTP $POS_ACT
; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

; Create RSI Object ST_Ethernet, read object configuration .../INIT/ERXConfig.xml
err = ST_ETHERNET(hEthernet,0,"ERXconfig.xml")
IF (err <> #RSIOK) THEN
  HALT
ENDIF
; err = ST_SETPARAM(hEthernet,eERXmaxLatePackages,1) ; after "value" to late packages the robot stopps
; err = ST_SETPARAM(hEthernet,eERXmaxLateInPercent,10) ; RSIWARNING if the limit reached
; err = ST_SETPARAM(hEthernet,eERXmaxFieldOfView,1000) ;reset every 'value' statistics. 
; err = ST_SETPARAM(hEthernet, eERXFastCycle, 1) ; FALSE: Time to answer 11ms / TRUE: Fast cycle: answer <2ms necessary!
; err = ST_SETPARAM(hEthernet, eERXerrorFlag, 1) ; $FLAG[1] will be set in case off errors
  
;FOLD RSI-Objects to link in ST_Ethernet
; read $IN[1-16]
err = ST_DIGIN(hDin,0,1,2,0)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK_IN(hDin,1,hEthernet,1,"DiL") 
IF (err <> #RSIOK) THEN
  HALT
ENDIF

; read $OUT[1-3]
err = ST_DIGOUT(hDout1,0,1,0,0)
IF (err <> #RSIOK) THEN
  HALT
ENDIF 
err = ST_DIGOUT(hDout2,0,2,0,0) 
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_DIGOUT(hDout3,0,3,0,0)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK_IN(hDout1,1,hEthernet,2,"Digout.o1") 
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK_IN(hDout2,1,hEthernet,3,"Digout.o2") 
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK_IN(hDout3,1,hEthernet,4,"Digout.o3")
IF (err <> #RSIOK) THEN
  HALT
ENDIF

; make sine signal 
UNIT_RSI = 3601
err = ST_SOURCE(hsource,0,UNIT_RSI)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_SETPARAM(hsource,1,1)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_SETPARAM(hsource,3,50)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK_IN(hsource,1,hEthernet,5,"ST_Source")
IF (err <> #RSIOK) THEN
  HALT
ENDIF
;ENDFOLD

;FOLD RSI-Objects to link out of ST_Ethernet
; link RKorr to correction on path
err = ST_PATHCORR(hPath,0)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK_OUT(hEthernet,1,hPath,1,"RKorr.X")
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK_OUT(hEthernet,2,hPath,2,"RKorr.Y")
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK_OUT(hEthernet,3,hPath,3,"RKorr.Z")
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK_OUT(hEthernet,4,hPath,4,"RKorr.A")
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK_OUT(hEthernet,5,hPath,5,"RKorr.B")
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_NEWLINK_OUT(hEthernet,6,hPath,6,"RKorr.C")
IF (err <> #RSIOK) THEN
  HALT
ENDIF

; DiO map to $OUT[8-24] 
err = ST_MAP2DIGOUT(hMapDio,0,hEthernet,19,2,2)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
; show RKorr on $SEN_PREA[1-6]
err = ST_MAP2SEN_PREA(hmap,0,hEthernet,1,1)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_MAP2SEN_PREA(hmap,0,hEthernet,2,2)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_MAP2SEN_PREA(hmap,0,hEthernet,3,3)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_MAP2SEN_PREA(hmap,0,hEthernet,4,4)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_MAP2SEN_PREA(hmap,0,hEthernet,5,5)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
err = ST_MAP2SEN_PREA(hmap,0,hEthernet,6,6)
IF (err <> #RSIOK) THEN
  HALT
ENDIF

; show DiO on $SEN_PINT[1]
err = ST_MAP2SEN_PINT(hmap,0,hEthernet,19,1)
IF (err <> #RSIOK) THEN
  HALT
ENDIF
;ENDFOLD

err = ST_ON1(#BASE,1)
;err = ST_ON1(#TCP,1)
;err = ST_ON1(#WORLD,1)
IF (err <> #RSIOK) THEN
  HALT
ENDIF


; *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=*=*=*
ST_SKIPSENS() ;Hold on - until RSI-Break reason occur
; *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=*=*=*

PTP $POS_ACT

END